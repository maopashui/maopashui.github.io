<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://www.x2ve.com</id>
    <title>猫怕水的博客</title>
    <updated>2022-10-17T12:16:42.671Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://www.x2ve.com"/>
    <link rel="self" href="https://www.x2ve.com/atom.xml"/>
    <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
    <logo>https://www.x2ve.com/images/avatar.png</logo>
    <icon>https://www.x2ve.com/favicon.ico</icon>
    <rights>All rights reserved 2022, 猫怕水的博客</rights>
    <entry>
        <title type="html"><![CDATA[MySQL及ORACLE架构基本知识记录]]></title>
        <id>https://www.x2ve.com/post/mysql-ji-oracle-jia-gou-ji-ben-zhi-shi-ji-lu/</id>
        <link href="https://www.x2ve.com/post/mysql-ji-oracle-jia-gou-ji-ben-zhi-shi-ji-lu/">
        </link>
        <updated>2022-10-17T12:14:56.000Z</updated>
        <content type="html"><![CDATA[<h3 id="mysql">MySQL:</h3>
<h5 id="1-如何判断两套库之间的关联">1、如何判断两套库之间的关联：</h5>
<pre><code class="language-sql">--MySQL技术支持推荐方式：
-- 主节点上执行：
show processlist -- 这里会有Binlog Dump GTID对应的找出所有的从节点ip+通信端口；
-- 从节点上执行：
show slave status\G -- 这里会查询出来Master_Host对应的主节点IP

-- 目前所用关联一套库方式
-- *****************
-- 因为采集到的iplist包含了多个ip，需要进行遍历，
-- 在加工规则上，masteruuid+实例名一致则算作一套库更容易加工
-- *****************
-- 主节点上执行：
select @server_uuid -- 查询出当前节点上的uuid号
-- 从节点上执行：
show slave status\G -- 这里会查询出来Master_UUID，，该值指向主节点的serveruuid
</code></pre>
<h5 id="2-mysql复制方式">2、MySQL复制方式</h5>
<pre><code class="language-shell">#1、异步复制（Async Replication）
主库将更新写入Binlog日志文件后，不需要等待数据更新是否已经复制到从库中，就可以继续处理更多的请求。Master将事件写入binlog，但并不知道Slave是否或何时已经接收且已处理。在异步复制的机制的情况下，如果Master宕机，事务在Master上已提交，但很可能这些事务没有传到任何的Slave上。假设有Master-&gt;Salve故障转移的机制，此时Slave也可能会丢失事务。MySQL复制默认是异步复制，异步复制提供了最佳性能。

#2、同步复制（Sync Replication）
主库将更新写入Binlog日志文件后，需要等待数据更新已经复制到从库中，并且已经在从库执行成功，然后才能返回继续处理其它的请求。同步复制提供了最佳安全性，保证数据安全，数据不会丢失，但对性能有一定的影响。

#3、半同步复制（Semi-Sync Replication）
主库提交更新写入二进制日志文件后，等待数据更新写入了从服务器中继日志中，然后才能再继续处理其它请求。该功能确保至少有1个从库接收完主库传递过来的binlog内容已经写入到自己的relay log里面了，才会通知主库上面的等待线程，该操作完毕。
半同步复制，是最佳安全性与最佳性能之间的一个折中。
MySQL 5.5版本之后引入了半同步复制功能，主从服务器必须安装半同步复制插件，才能开启该复制功能。如果等待超时，超过rpl_semi_sync_master_timeout参数设置时间（默认值为10000，表示10秒），则关闭半同步复制，并自动转换为异步复制模式。当master dump线程发送完一个事务的所有事件之后，如果在rpl_semi_sync_master_timeout内，收到了从库的响应，则主从又重新恢复为增强半同步复制。
ACK (Acknowledge character）即是确认字符。

#4、增强半同步复制（lossless Semi-Sync Replication、无损复制）
增强半同步是在MySQL 5.7引入，其实半同步可以看成是一个过渡功能，因为默认的配置就是增强半同步，所以，大家一般说的半同步复制其实就是增强的半同步复制，也就是无损复制。
增强半同步和半同步不同的是，等待ACK时间不同
rpl_semi_sync_master_wait_point = AFTER_SYNC（默认）
半同步的问题是因为等待ACK的点是Commit之后，此时Master已经完成数据变更，用户已经可以看到最新数据，当Binlog还未同步到Slave时，发生主从切换，那么此时从库是没有这个最新数据的，用户看到的是老数据。
增强半同步将等待ACK的点放在提交Commit之前，此时数据还未被提交，外界看不到数据变更，此时如果发送主从切换，新库依然还是老数据，不存在数据不一致的问题
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://pic1.imgdb.cn/item/634d176c16f2c2beb1fa5726.png" alt="img" loading="lazy"></figure>
<h5 id="3-加工规则">3、加工规则</h5>
<pre><code class="language-shell"># HA 
# masteruuid+instancename+dbarch
HA及容灾：当多个物理节点上，masteruuid一致，且实例名一致，则算作一组数据库
迁移是特殊情况：这里HA的主节点masteruuid指向单节点或其他主节点，该种情况下，会在HA主节点上有一个channel_name的标识，当有该标识时，调整当前节点的masteruuid为serveruuid即可，然后加工规则同上
# MGR 
# mgrinstancename+dbarch
# 容灾：mgrinstancename+masteruuid+dbarch
优先判断mgr内部，mgrinstancme（replication_group_name）是一致的，如果是容灾，则需要关联主从节点上的masteruuid是否一致,且库名取实例名较短的
# RHCS
# rhcsnames+instancename+dbarch
# rhcs+rhcs:rhcsnames+masteruuid+dbarch
优先判断rhcs是否一致，通过clustat查询机器即可得到，如果还有主从关系，则通过masteruuid来关联,且库名实例名取较长的
# 单机或主从
# instancename+dbarch
单机：实例名唯一
主从：
</code></pre>
<h4 id="一-ha">一、HA</h4>
<h5 id="1-ha架构">1、HA架构</h5>
<p>由两个节点构成，其中一台为备份节点，当主节点不可用时，HA自动切换到备份节点</p>
<figure data-type="image" tabindex="2"><img src="https://pic1.imgdb.cn/item/634bfa1616f2c2beb185ab1e.png" alt="image-20221016153453620" loading="lazy"></figure>
<h5 id="2-ha容灾">2、HA容灾</h5>
<p>由两个HA组成，其中一个可看作主，一个看作从，两者之间通过gtid复制来保持数据一致</p>
<figure data-type="image" tabindex="3"><img src="https://pic1.imgdb.cn/item/634d131a16f2c2beb1f363a4.png" alt="image-20221017163017552" loading="lazy"></figure>
<h5 id="3-ha单机">3、HA+单机</h5>
<figure data-type="image" tabindex="4"><img src="https://pic1.imgdb.cn/item/634bfa7816f2c2beb1865e89.png" alt="image-20221016171144307" loading="lazy"></figure>
<h5 id="4-迁移情况">4、迁移情况</h5>
<p>HA从单节点复制数据，待复制完后，断开两者之间的关联，则有两套库</p>
<figure data-type="image" tabindex="5"><img src="https://pic1.imgdb.cn/item/634bfad716f2c2beb187065c.png" alt="image-20221016154121799" loading="lazy"></figure>
<h4 id="二-mgr">二、MGR</h4>
<h5 id="1-mgr架构">1、MGR架构</h5>
<p>单主模式：主节点可指定，当节点不可用时，自动在剩余从节点中选举产生主节点</p>
<p>​	<img src="https://pic1.imgdb.cn/item/634bfaef16f2c2beb1872c4d.png" alt="image-20221016154546798" loading="lazy"></p>
<h5 id="2-mgr容灾">2、MGR容灾</h5>
<p>两者之间互为主从，可以进行切换</p>
<figure data-type="image" tabindex="6"><img src="https://pic1.imgdb.cn/item/634bfb0516f2c2beb18753d8.png" alt="image-20221016154620356" loading="lazy"></figure>
<h4 id="三-rhcs">三、RHCS</h4>
<h5 id="1-rhcs架构">1、RHCS架构</h5>
<p>通过共享存储来实现集群效果</p>
<figure data-type="image" tabindex="7"><img src="https://pic1.imgdb.cn/item/634bfb1b16f2c2beb1877b56.png" alt="image-20221016124909298" loading="lazy"></figure>
<h5 id="2-rhcsrhcs">2、RHCS+RHCS</h5>
<figure data-type="image" tabindex="8"><img src="https://pic1.imgdb.cn/item/634bfb2f16f2c2beb1879dae.png" alt="image-20221016125435687" loading="lazy"></figure>
<h5 id="3-rhcsrhcs单机">3、RHCS+RHCS+单机</h5>
<figure data-type="image" tabindex="9"><img src="https://pic1.imgdb.cn/item/634bfb4816f2c2beb187c930.png" alt="image-20221016171232542" loading="lazy"></figure>
<h4 id="四-单机或主从">四、单机或主从</h4>
<h5 id="1-单机">1、单机</h5>
<figure data-type="image" tabindex="10"><img src="https://pic1.imgdb.cn/item/634bfb5e16f2c2beb187ed14.png" alt="image-20221016125752583" loading="lazy"></figure>
<h5 id="2-一主一从或一主多从">2、一主一从或一主多从</h5>
<h5 id=""><img src="https://pic1.imgdb.cn/item/634d137a16f2c2beb1f3fc37.png" alt="image-20221017163112758" loading="lazy"><img src="https://pic1.imgdb.cn/item/634bfb8516f2c2beb1882e36.png" alt="image-20221016154751999" loading="lazy"></h5>
<h2 id="oracle">ORACLE</h2>
<h5 id="加工规则">加工规则</h5>
<pre><code class="language-shell"># DG
# dglist+dbname+dbarch
DG:dglist取主节点上uniquename相同的，且dbname相同，则为一组DG库
# RAC
# clustername+dbname+dbarch
RAC:取集群名和数据库名一致的数据为一组库
# 单机
# dbname+dbarch
单机：数据库名唯一
</code></pre>
<h4 id="一-rac">一、RAC</h4>
<p>两个数据库节点间通过私有IP通信，外部访问则通过vip，或者scanip自动分配访问节点（注意：11g主要通过vip，12以上通过scanip访问）</p>
<figure data-type="image" tabindex="11"><img src="https://pic1.imgdb.cn/item/634bfb9916f2c2beb1884ed4.png" alt="dbscan-ORACLE-RAC.drawio" loading="lazy"></figure>
<h4 id="二-dg">二、DG</h4>
<p>两个或多个RAC，其中一个为主，其中dglist可通过在每个节点上v$dataguard_config视图（11g只有uniquename，没有节点角色信息）查询出来，亦可通过每个节点dgmgr下show configuration lag命令查询</p>
<figure data-type="image" tabindex="12"><img src="https://pic1.imgdb.cn/item/634bfbab16f2c2beb1886d02.png" alt="dbscan-ORACLE-DG.drawio" loading="lazy"></figure>
<h4 id="三-单机">三、单机</h4>
<figure data-type="image" tabindex="13"><img src="https://pic1.imgdb.cn/item/634bfbbc16f2c2beb18888a7.png" alt="dbscan-ORACLE-单机.drawio" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[pipenv的基本使用]]></title>
        <id>https://www.x2ve.com/post/pipenv-de-ji-ben-shi-yong/</id>
        <link href="https://www.x2ve.com/post/pipenv-de-ji-ben-shi-yong/">
        </link>
        <updated>2022-07-03T05:50:58.000Z</updated>
        <content type="html"><![CDATA[<p><strong>Pipenv的作用</strong></p>
<p>可以利用pipenv来实现同时管理项目中的python虚拟环境和相关包依赖。</p>
<p><strong>使用步骤</strong></p>
<ol>
<li>cmd中输入命令 pip install pipenv 安装pipenv</li>
<li>cmd切换路径到需要建立虚拟环境的项目目录下</li>
<li>输入命令 pipenv install 开始安装虚拟环境</li>
<li>安装完毕后输入命令 pipenv shell 进入虚拟环境</li>
</ol>
<p><strong>Pipfile文件</strong></p>
<ul>
<li>虚拟环境安装完毕后项目目录中将创建Pipfile/Pipfile.lock两个文件</li>
<li>Pipfile：用于保存项目的python版本、依赖包等相关信息</li>
<li>Pipfile.lock：用于对Pipfile的锁定</li>
<li>Pipfile文件可以单独移放到其他项目内，用于项目虚拟环境的建立和依赖包的安装</li>
</ul>
<p><strong>常用命令</strong></p>
<ul>
<li>
<p>pipenv install：</p>
</li>
<li>
<ul>
<li>若项目目录中虚拟环境未创建且无Pipfile文件，将安装虚拟环境并创建Pipfile文件</li>
<li>若项目目录中虚拟环境未创建且有Pipfile文件，将根据Pipfile文件来安装相应python版本和依赖包</li>
<li>若项目目录中虚拟环境已创建且有Pipfile文件，将根据Pipfile文件来安装依赖包</li>
</ul>
</li>
<li>
<p>pipenv install xx:：安装python包</p>
</li>
<li>
<p>pipenv uninstall xx:：卸载python包</p>
</li>
<li>
<p>pipenv shell：进入虚拟环境(项目目录下)</p>
</li>
<li>
<p>exit：退出虚拟环境</p>
</li>
<li>
<p>pipenv graph：显示包依赖关系</p>
</li>
<li>
<p>pipenv --venv：显示虚拟环境安装路径</p>
</li>
</ul>
<p>注意：如果在pycharm中使用完pipenv shell进入到虚拟环境路径，输入activate即可进入</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows开启WSL服务]]></title>
        <id>https://www.x2ve.com/post/windows-kai-qi-wsl-fu-wu/</id>
        <link href="https://www.x2ve.com/post/windows-kai-qi-wsl-fu-wu/">
        </link>
        <updated>2022-06-14T04:21:30.000Z</updated>
        <content type="html"><![CDATA[<p>对系统的要求，应该是较新的win10 和win11可用</p>
<h6 id="1-首先在控制面板-程序和功能中-选择启用或关闭windows功能勾选-适用linux的-windows子系统">1、首先在控制面板-程序和功能中-选择启用或关闭Windows功能，勾选 适用Linux的 Windows子系统</h6>
<p>重启电脑</p>
<figure data-type="image" tabindex="1"><img src="https://pic.imgdb.cn/item/62a80dd10947543129fb9237.png" alt="" loading="lazy"></figure>
<pre><code class="language-shell"># 在wsl服务启动后 可以使用wsl命令 常用的

&gt; wsl -l -v # 查看当前电脑有哪些wsl系统及版本
&gt; wsl -s linux_name # 指定默认系统
&gt; wsl -d linux_name # 指定系统
# 另外 wsl的命令可以直接作用到linux系统上，如
&gt; wsl -- sudo vi /etc/profile # 可以直接修改linux的系统环境变量
</code></pre>
<h6 id="2-打开微软商店搜索linux或者自行下载">2、打开微软商店搜索linux或者自行下载</h6>
<p>连接地址 https://docs.microsoft.com/zh-cn/windows/wsl/install-manual</p>
<figure data-type="image" tabindex="2"><img src="https://pic.imgdb.cn/item/62a80eb20947543129fca25a.png" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://pic.imgdb.cn/item/62a80ed90947543129fccfd6.png" alt="" loading="lazy"></figure>
<h6 id="3-完了在开始菜单可以看到新安装的系统我这里是装的debian">3、完了在开始菜单可以看到新安装的系统，我这里是装的debian</h6>
<figure data-type="image" tabindex="4"><img src="https://pic.imgdb.cn/item/62a80fae0947543129fdbc08.png" alt="" loading="lazy"></figure>
<p>在cmd窗口输入wsl即可进入到系统中</p>
<figure data-type="image" tabindex="5"><img src="https://pic.imgdb.cn/item/62a80fe50947543129fdff30.png" alt="" loading="lazy"></figure>
<pre><code class="language-shell"># 设置root密码
$ sudo root passwd
</code></pre>
<h6 id="4-其他问题">4、其他问题</h6>
<p>将默认安装的linux迁移到其他盘下面，也适用于不同电脑间的迁移</p>
<p>1、工具 LxRunOffline，可在github上面查找</p>
<p>2、执行命令行导出 导入</p>
<pre><code class="language-shell">&gt; wsl --export distro_name file_name.tar # 导出
&gt; wsl --import distro_name d:\install_location file_name.tar # 导入,注意安装路径
&gt; wsl --unregister distro_name # 卸载原有的linux
&gt; wsl -l # 查看系统
</code></pre>
<p>3、部分系统命令不能像其他系统一样正常使用，如systemctl</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Caddy代理服务]]></title>
        <id>https://www.x2ve.com/post/caddy-dai-li-fu-wu/</id>
        <link href="https://www.x2ve.com/post/caddy-dai-li-fu-wu/">
        </link>
        <updated>2022-04-16T04:58:47.000Z</updated>
        <summary type="html"><![CDATA[<p>在windows机上快速代理web服务，生成自签SSL证书</p>
]]></summary>
        <content type="html"><![CDATA[<p>在windows机上快速代理web服务，生成自签SSL证书</p>
<!-- more -->
<p>参考文档：<a href="https://dengxiaolong.com/caddy/zh/http.header.html">Caddy中文文档</a></p>
<h5 id="下载">下载</h5>
<p><a href="https://caddyserver.com/download.html">caddy下载</a></p>
<p><a href="https://github.com/FiloSottile/mkcert/releases">mkcert下载</a></p>
<h5 id="caddy部分">Caddy部分</h5>
<p>Caddyfile</p>
<p>header path -name 这里是设置响应头信息，path指路径，-是隐藏该响应标头，+为添加，详见文档http.header节</p>
<pre><code class="language-ini">:443 {
 encode gzip
 header /* -server
 tls \xxx\caddy\multi.crt \xxx\caddy\multi.key
 reverse_proxy 127.0.0.1:3000
}
</code></pre>
<p>caddy启动命令</p>
<pre><code class="language-sh">caddy run # 将Caddyfile文件放入同路径，默认会启用配置文件
</code></pre>
<h5 id="mkcert生成证书">mkcert生成证书</h5>
<pre><code class="language-sh"># 示例
mkcert -key-file multi.key -cert-file multi.crt *.domain 127.0.0.1 192.168.1.1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 小记]]></title>
        <id>https://www.x2ve.com/post/git-xiao-ji/</id>
        <link href="https://www.x2ve.com/post/git-xiao-ji/">
        </link>
        <updated>2022-04-13T03:20:52.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h5 id="常用命令">常用命令</h5>
<pre><code class="language-sh"># 添加到缓存区
git add .

# 提交注释
git commit -m &quot; comment &quot;

# 提交到远程仓库
git push 

# 拉取仓库代码
git clone http://xxxx.git

# 同步远程仓库代码
git pull

# 查询当前.git指向的远程仓库地址
git remote -v

# 删除/添加当前.git指向的远程仓库地址
git remote rm xxx.git
git remote add xxx.git

git remote remove origin
git remote add origin xxx.git

# 查看git日志
git log

# 查看git状态
git status

# 查看分支
git branch
git branch -avv #看本地
git branch -r # 看远程分支

# 创建并切换到本地分支
git checkout -b 本地分支名 origin/远程分支名
git push orgigin 本地分支名:远程分支名

同步远程分支到本地
git pull origin 远程分支名:本地分支名
</code></pre>
<h5 id="其他情况">其他情况</h5>
<pre><code class="language-sh"># 修改commit
# 1、仅commit未push
# 仅修改最近一次commit，且push
git commit --amend
# 修改相关信息 wq保存
# 如果push不成功，可能需要pull同步一下代码，

# 2、修改之前的某次注释
git rebase -i HEAD~2 # 2表示倒数第二次，会显示倒数两次的注释
# 将注释前的pick 修改为 edit 
git commit --amend
git rebase continue

# 3、 仅add未commit
git reset HEAD

# 4、还原本次所有修改，未git add 
git checkout -- * //还原全部文件
git checkout -- aaa.txt //还原指定文件
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux小记]]></title>
        <id>https://www.x2ve.com/post/linux-xiao-ji/</id>
        <link href="https://www.x2ve.com/post/linux-xiao-ji/">
        </link>
        <updated>2022-04-08T10:35:31.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-sh"># 删除指定日期前的文件 
# -mtime +7 7天前的文件
# -user 对应的用户
# head -n 10 10个文件
find ./ -mtime +7 -type f -user &quot;$USER&quot; -name ./*.log |head -n 10|xargs rm -f
# 别名 alias
alias ll='ls -l'
以上是临时生效
# 针对某个用户有效，在 ~/.bashrc中添加
alias ll='ls -l'
# 保存后 source ~/.bashrc生效

# 分隔字符串 如 aa,bb,cc 分隔为 aa bb cc
awk -F , '{print $1,$2,$3}'
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用网址记录]]></title>
        <id>https://www.x2ve.com/post/chang-yong-wang-zhi-ji-lu/</id>
        <link href="https://www.x2ve.com/post/chang-yong-wang-zhi-ji-lu/">
        </link>
        <updated>2022-04-03T09:45:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="font-color8b1a1a设计类font"><font color=#8B1A1A>设计类</font></h2>
<h2 id="font-color8b1a1a工具类font"><font color=#8B1A1A>工具类</font></h2>
<h3 id="font-colorffaeb9在线工具font"><font color=#FFAEB9>在线工具</font></h3>
<p><a href="https://tool.lu/crontab/">crontab在线</a>	<br>
<a href="http://www.jsons.cn/">json在线解析1</a>	<br>
<a href="https://www.json.cn/">json在线解析2</a>	<br>
<a href="https://www.free-api.com/">免费api接口</a>	<br>
<a href=""></a>	    <a href=""></a>	    <a href=""></a>	    <a href=""></a></p>
<h3 id="font-colorffaeb9镜像站font"><font color=#FFAEB9>镜像站</font></h3>
<p>首推清华<br>
<a href="http://mirrors.163.com/">网易</a>	<br>
<a href="https://mirrors.huaweicloud.com/home">华为</a>	<br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华</a>	<br>
<a href=""></a>	    <a href=""></a>	    <a href=""></a></p>
<h3 id="font-colorffaeb9图床font"><font color=#FFAEB9>图床</font></h3>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<h3 id="font-colorffaeb9文件分享font"><font color=#FFAEB9>文件分享</font></h3>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<h2 id="font-color8b1a1a学习类font"><font color=#8B1A1A>学习类</font></h2>
<p><a href="https://www.liaoxuefeng.com/">廖雪峰</a>	<br>
<a href="https://www.r2coding.com/">r2coding</a>	<br>
<a href="https://www.bookstack.cn/">书栈网</a>	<br>
<a href=""></a></p>
<h2 id="font-color8b1a1avps购买font"><font color=#8B1A1A>VPS购买</font></h2>
<p><a href="https://cloud.tencent.com/">腾讯云</a>	<br>
<a href="https://www.aliyun.com/">阿里云</a>	<br>
<a href=""></a>	<a href=""></a></p>
<h2 id="font-color8b1a1a常用工具下载链接font"><font color=#8B1A1A>常用工具下载链接</font></h2>
<h3 id="font-colorffaeb9数据库font"><font color=#FFAEB9>数据库</font></h3>
<p><a href="https://www.postgresql.org/ftp/source/">PostgreSQL</a>	<br>
<a href="http://www.mirrorservice.org/sites/ftp.mysql.com/Downloads/">MySQL</a>	<br>
<a href=""></a>	<a href=""></a></p>
<h3 id="font-colorffaeb9系统font"><font color=#FFAEB9>系统</font></h3>
<p><a href="https://msdn.itellyou.cn/">MSDN我告诉你</a>	<br>
<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<p>方便复制↓↓↓↓↓</p>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kettle记录]]></title>
        <id>https://www.x2ve.com/post/kettle-ji-lu/</id>
        <link href="https://www.x2ve.com/post/kettle-ji-lu/">
        </link>
        <updated>2022-04-03T04:20:43.000Z</updated>
        <content type="html"><![CDATA[<h4 id="调用js抽取数据库照片到本地">调用js抽取数据库照片到本地</h4>
<p>结合表查询，就可以了，，表查询的字段sfzh和zp</p>
<pre><code class="language-js">//Script here
//文件路径
var filepath = &quot;G:\\zp\\&quot;;
//相片名称
var filename = SFZH+&quot;.jpg&quot;;
//写到硬盘
var fos = new Packages.java.io.FileOutputStream(new Packages.java.io.File(filepath+filename));
fos.write(ZP);
fos.close();//关闭
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[端口转发]]></title>
        <id>https://www.x2ve.com/post/duan-kou-zhuan-fa/</id>
        <link href="https://www.x2ve.com/post/duan-kou-zhuan-fa/">
        </link>
        <updated>2022-04-03T04:13:19.000Z</updated>
        <content type="html"><![CDATA[<h4 id="windows">windows</h4>
<pre><code class="language-shell">netsh interface portproxy add v4tov4 listenaddress=1.12.xx.xx listenport=52993 connectaddress=imap.exmail.qq.com connectport=993

取消端口转发
netsh interface portproxy delete v4tov4 listenaddress=1.12.xx.xx listenport=52993

查看端口转发
netsh interface portproxy show v4tov4
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DB2小记]]></title>
        <id>https://www.x2ve.com/post/db2-xiao-ji/</id>
        <link href="https://www.x2ve.com/post/db2-xiao-ji/">
        </link>
        <updated>2022-04-03T04:05:45.000Z</updated>
        <content type="html"><![CDATA[<h4 id="命令行相关">命令行相关</h4>
<pre><code class="language-sh"># 打开调试输出开关，一般是存储过程中使用
db2 set serveroutput on

# db2设置终止符
db2set db2options=-td\;  # 注意这里封号需要将结束符进行转义
db2set db2options=-td@  # 这里则不需要转义

# db2 import命令；先连接，再导入，再退出
# 需要注意中间的插入更新方式，字符集设置，分割符设置，提交行数
db2 connect to &lt;DBNAME&gt; user &lt;USERNAME&gt; using &lt;PASSWORD&gt; &amp;&amp; db2 'import form '&lt;filename&gt;' of del modified by codepage=1208 coldel0x1e commitcount 10000 insert_update into &lt;TABLENAME&gt; (COLNAME,...COLNAME,COLNAME)' &amp;&amp; db2 terminate
</code></pre>
]]></content>
    </entry>
</feed>