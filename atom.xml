<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://maopashui.github.io</id>
    <title>猫怕水的博客</title>
    <updated>2022-04-16T11:38:40.927Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://maopashui.github.io"/>
    <link rel="self" href="https://maopashui.github.io/atom.xml"/>
    <subtitle>纸上得来终觉浅，绝知此事要躬行</subtitle>
    <logo>https://maopashui.github.io/images/avatar.png</logo>
    <icon>https://maopashui.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, 猫怕水的博客</rights>
    <entry>
        <title type="html"><![CDATA[Caddy代理服务]]></title>
        <id>https://maopashui.github.io/post/caddy-dai-li-fu-wu/</id>
        <link href="https://maopashui.github.io/post/caddy-dai-li-fu-wu/">
        </link>
        <updated>2022-04-16T04:58:47.000Z</updated>
        <summary type="html"><![CDATA[<p>在windows机上快速代理web服务，生成自签SSL证书</p>
]]></summary>
        <content type="html"><![CDATA[<p>在windows机上快速代理web服务，生成自签SSL证书</p>
<!-- more -->
<p>参考文档：<a href="https://dengxiaolong.com/caddy/zh/http.header.html">Caddy中文文档</a></p>
<h5 id="下载">下载</h5>
<p><a href="https://caddyserver.com/download.html">caddy下载</a></p>
<p><a href="https://github.com/FiloSottile/mkcert/releases">mkcert下载</a></p>
<h5 id="caddy部分">Caddy部分</h5>
<p>Caddyfile</p>
<p>header path -name 这里是设置响应头信息，path指路径，-是隐藏该响应标头，+为添加，详见文档http.header节</p>
<pre><code class="language-ini">:443 {
 encode gzip
 header /* -server
 tls \xxx\caddy\multi.crt \xxx\caddy\multi.key
 reverse_proxy 127.0.0.1:3000
}
</code></pre>
<p>caddy启动命令</p>
<pre><code class="language-sh">caddy run # 将Caddyfile文件放入同路径，默认会启用配置文件
</code></pre>
<h5 id="mkcert生成证书">mkcert生成证书</h5>
<pre><code class="language-sh"># 示例
mkcert -key-file multi.key -cert-file multi.crt *.domain 127.0.0.1 192.168.1.1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Git 小记]]></title>
        <id>https://maopashui.github.io/post/git-xiao-ji/</id>
        <link href="https://maopashui.github.io/post/git-xiao-ji/">
        </link>
        <updated>2022-04-13T03:20:52.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h5 id="常用命令">常用命令</h5>
<pre><code class="language-sh"># 添加到缓存区
git add .

# 提交注释
git commit -m &quot; comment &quot;

# 提交到远程仓库
git push 

# 拉取仓库代码
git clone http://xxxx.git

# 同步远程仓库代码
git pull

# 查询当前.git指向的远程仓库地址
git remote -v

# 查看git日志
git log

# 查看git状态
git status

# 查看分支
git branch
git branch -avv #看本地
git branch -r # 看远程分支

# 创建并切换到本地分支
git checkout -b 本地分支名 origin/远程分支名
git push orgigin 本地分支名:远程分支名

同步远程分支到本地
git pull origin 远程分支名:本地分支名
</code></pre>
<h5 id="其他情况">其他情况</h5>
<pre><code class="language-sh"># 修改commit
# 1、仅commit未push
# 仅修改最近一次commit，且push
git commit --amend
# 修改相关信息 wq保存
# 如果push不成功，可能需要pull同步一下代码，

# 2、修改之前的某次注释
git rebase -i HEAD~2 # 2表示倒数第二次，会显示倒数两次的注释
# 将注释前的pick 修改为 edit 
git commit --amend
git rebase continue

# 3、 仅add未commit
git reset HEAD

# 4、还原本次所有修改，未git add 
git checkout -- * //还原全部文件
git checkout -- aaa.txt //还原指定文件
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux小记]]></title>
        <id>https://maopashui.github.io/post/linux-xiao-ji/</id>
        <link href="https://maopashui.github.io/post/linux-xiao-ji/">
        </link>
        <updated>2022-04-08T10:35:31.000Z</updated>
        <content type="html"><![CDATA[<pre><code class="language-sh"># 删除指定日期前的文件 
# -mtime +7 7天前的文件
# -user 对应的用户
# head -n 10 10个文件
find ./ -mtime +7 -type f -user &quot;$USER&quot; -name ./*.log |head -n 10|xargs rm -f

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用网址记录]]></title>
        <id>https://maopashui.github.io/post/chang-yong-wang-zhi-ji-lu/</id>
        <link href="https://maopashui.github.io/post/chang-yong-wang-zhi-ji-lu/">
        </link>
        <updated>2022-04-03T09:45:42.000Z</updated>
        <content type="html"><![CDATA[<h2 id="font-color8b1a1a设计类font"><font color=#8B1A1A>设计类</font></h2>
<h2 id="font-color8b1a1a工具类font"><font color=#8B1A1A>工具类</font></h2>
<h3 id="font-colorffaeb9在线工具font"><font color=#FFAEB9>在线工具</font></h3>
<p><a href="https://tool.lu/crontab/">crontab在线</a>	<br>
<a href="http://www.jsons.cn/">json在线解析1</a>	<br>
<a href="https://www.json.cn/">json在线解析2</a>	<br>
<a href="https://www.free-api.com/">免费api接口</a>	<br>
<a href=""></a>	    <a href=""></a>	    <a href=""></a>	    <a href=""></a></p>
<h3 id="font-colorffaeb9镜像站font"><font color=#FFAEB9>镜像站</font></h3>
<p>首推清华<br>
<a href="http://mirrors.163.com/">网易</a>	<br>
<a href="https://mirrors.huaweicloud.com/home">华为</a>	<br>
<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华</a>	<br>
<a href=""></a>	    <a href=""></a>	    <a href=""></a></p>
<h3 id="font-colorffaeb9图床font"><font color=#FFAEB9>图床</font></h3>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<h3 id="font-colorffaeb9文件分享font"><font color=#FFAEB9>文件分享</font></h3>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<h2 id="font-color8b1a1a学习类font"><font color=#8B1A1A>学习类</font></h2>
<p><a href="https://www.liaoxuefeng.com/">廖雪峰</a>	<br>
<a href="https://www.r2coding.com/">r2coding</a>	<br>
<a href="https://www.bookstack.cn/">书栈网</a>	<br>
<a href=""></a></p>
<h2 id="font-color8b1a1avps购买font"><font color=#8B1A1A>VPS购买</font></h2>
<p><a href="https://cloud.tencent.com/">腾讯云</a>	<br>
<a href="https://www.aliyun.com/">阿里云</a>	<br>
<a href=""></a>	<a href=""></a></p>
<h2 id="font-color8b1a1a常用工具下载链接font"><font color=#8B1A1A>常用工具下载链接</font></h2>
<h3 id="font-colorffaeb9数据库font"><font color=#FFAEB9>数据库</font></h3>
<p><a href="https://www.postgresql.org/ftp/source/">PostgreSQL</a>	<br>
<a href="http://www.mirrorservice.org/sites/ftp.mysql.com/Downloads/">MySQL</a>	<br>
<a href=""></a>	<a href=""></a></p>
<h3 id="font-colorffaeb9系统font"><font color=#FFAEB9>系统</font></h3>
<p><a href="https://msdn.itellyou.cn/">MSDN我告诉你</a>	<br>
<a href=""></a>	<a href=""></a>	<a href=""></a></p>
<p>方便复制↓↓↓↓↓</p>
<p><a href=""></a>	<a href=""></a>	<a href=""></a>	<a href=""></a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kettle记录]]></title>
        <id>https://maopashui.github.io/post/kettle-ji-lu/</id>
        <link href="https://maopashui.github.io/post/kettle-ji-lu/">
        </link>
        <updated>2022-04-03T04:20:43.000Z</updated>
        <content type="html"><![CDATA[<h4 id="调用js抽取数据库照片到本地">调用js抽取数据库照片到本地</h4>
<p>结合表查询，就可以了，，表查询的字段sfzh和zp</p>
<pre><code class="language-js">//Script here
//文件路径
var filepath = &quot;G:\\zp\\&quot;;
//相片名称
var filename = SFZH+&quot;.jpg&quot;;
//写到硬盘
var fos = new Packages.java.io.FileOutputStream(new Packages.java.io.File(filepath+filename));
fos.write(ZP);
fos.close();//关闭
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[端口转发]]></title>
        <id>https://maopashui.github.io/post/duan-kou-zhuan-fa/</id>
        <link href="https://maopashui.github.io/post/duan-kou-zhuan-fa/">
        </link>
        <updated>2022-04-03T04:13:19.000Z</updated>
        <content type="html"><![CDATA[<h4 id="windows">windows</h4>
<pre><code class="language-shell">netsh interface portproxy add v4tov4 listenaddress=1.12.xx.xx listenport=52993 connectaddress=imap.exmail.qq.com connectport=993

取消端口转发
netsh interface portproxy delete v4tov4 listenaddress=1.12.xx.xx listenport=52993

查看端口转发
netsh interface portproxy show v4tov4
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[DB2小记]]></title>
        <id>https://maopashui.github.io/post/db2-xiao-ji/</id>
        <link href="https://maopashui.github.io/post/db2-xiao-ji/">
        </link>
        <updated>2022-04-03T04:05:45.000Z</updated>
        <content type="html"><![CDATA[<h4 id="命令行相关">命令行相关</h4>
<pre><code class="language-sh"># 打开调试输出开关，一般是存储过程中使用
db2 set serveroutput on

# db2设置终止符
db2set db2options=-td\;  # 注意这里封号需要将结束符进行转义
db2set db2options=-td@  # 这里则不需要转义

# db2 import命令；先连接，再导入，再退出
# 需要注意中间的插入更新方式，字符集设置，分割符设置，提交行数
db2 connect to &lt;DBNAME&gt; user &lt;USERNAME&gt; using &lt;PASSWORD&gt; &amp;&amp; db2 'import form '&lt;filename&gt;' of del modified by codepage=1208 coldel0x1e commitcount 10000 insert_update into &lt;TABLENAME&gt; (COLNAME,...COLNAME,COLNAME)' &amp;&amp; db2 terminate
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Docker小记]]></title>
        <id>https://maopashui.github.io/post/docker-xiao-ji/</id>
        <link href="https://maopashui.github.io/post/docker-xiao-ji/">
        </link>
        <updated>2022-04-03T04:00:32.000Z</updated>
        <content type="html"><![CDATA[<h4 id="常用命令">常用命令</h4>
<pre><code class="language-shell"># 查看有哪些docker运行
docker ps
# 查看有哪些镜像
docker images
# 进入docker命令行
docker exec -it images_name bash
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ClickHouse安装过程记录]]></title>
        <id>https://maopashui.github.io/post/clickhouse-an-zhuang-guo-cheng-ji-lu/</id>
        <link href="https://maopashui.github.io/post/clickhouse-an-zhuang-guo-cheng-ji-lu/">
        </link>
        <updated>2021-05-13T08:06:51.000Z</updated>
        <content type="html"><![CDATA[<p>安装环境：Centos7<br>
先在centos添加国内源<br>
然后添加官方存储库：</p>
<pre><code class="language-shell">sudo yum install yum-utils
sudo rpm --import https://repo.clickhouse.tech/CLICKHOUSE-KEY.GPG
sudo yum-config-manager --add-repo https://repo.clickhouse.tech/rpm/stable/x86_64
sudo yum install clickhouse-server clickhouse-client -y
</code></pre>
<p>默认安装在/etc/clickhouse-server、/etc/clickhouse-client<br>
在centos7上，启动命令</p>
<pre><code class="language-shell">systemctl start clickhouse-server
</code></pre>
<p>官方启动</p>
<pre><code class="language-text">启动 
如果没有service，可以运行如下命令在后台启动服务：

$ sudo /etc/init.d/clickhouse-server start
日志文件将输出在/var/log/clickhouse-server/文件夹。

如果服务器没有启动，检查/etc/clickhouse-server/config.xml中的配置。

您也可以手动从控制台启动服务器:

$ clickhouse-server --config-file=/etc/clickhouse-server/config.xml
</code></pre>
<p>查看是否启动</p>
<pre><code class="language-shell">$ clickhouse-client
:) SELECT 1
</code></pre>
<p>其他需要注意的地方，<br>
1、9000端口占用,clickhouse启动报错，修改/etc/clickhouse-server/config.xml<br>
这里主要修改tcp_port即可，默认是9000</p>
<pre><code class="language-shell">clickhouse-client --port 端口
</code></pre>
<p>2、开启远程连接<br>
修改/etc/clickhouse-server/config.xml，将&lt;listen_host&gt;::&lt;listen_host&gt;的注释取消掉<br>
重启服务</p>
<pre><code class="language-shell">systemctl restart clickhouse-server
</code></pre>
<p>3、配置default的密码<br>
设置用户名密码<br>
1.CLICKHOUSE的密码有2种形式，一种是明文，一种是写SHA256SUM的HASH值<br>
官方不建议直接写明文密码，可以用以下命令生成密码</p>
<pre><code class="language-shell">PASSWORD=$(base64 &lt; /dev/urandom | head -c8); echo &quot;$PASSWORD&quot;; echo -n &quot;$PASSWORD&quot; | sha256sum | tr -d '-'
</code></pre>
<p>这样可以得到两行数据，第一行是密码明文，第二行是密码密文<br>
ClickHouse的配置文件默认地址 /etc/clickhouse/users.xml<br>
找到users --&gt; default --&gt; 标签下的password修改成password_sha256_hex，并把密文填进去</p>
<pre><code class="language-xml">&lt;password_sha256_hex&gt;密码密文&lt;/password_sha256_hex&gt;
</code></pre>
<p>修改密码后，clickhouse-client需变更连接方式</p>
<pre><code class="language-shell">clickhouse-client -h ip地址 -d default -m -u default --password 密码明文
</code></pre>
<p>参考连接：</p>
<blockquote>
<p>https://clickhouse.tech/docs/zh/getting-started/install/<br>
https://blog.csdn.net/chengyuqiang/article/details/108534587</p>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows安装Superset]]></title>
        <id>https://maopashui.github.io/post/windows-an-zhuang-superset/</id>
        <link href="https://maopashui.github.io/post/windows-an-zhuang-superset/">
        </link>
        <updated>2021-01-15T06:47:27.000Z</updated>
        <summary type="html"><![CDATA[<p>💻搭建系统：Windows10 企业版 LTSB<br>
⌨️可视化系统：Superset</p>
]]></summary>
        <content type="html"><![CDATA[<p>💻搭建系统：Windows10 企业版 LTSB<br>
⌨️可视化系统：Superset</p>
<!-- more -->
<p>创建Superset python虚拟环境<br>
<img src="https://img.imgdb.cn/item/6008dba73ffa7d37b31d020d.jpg" alt="1610693699538" loading="lazy"></p>
<p>安装superset<br>
<img src="https://img.imgdb.cn/item/6008dba23ffa7d37b31d00d0.jpg" alt="1610693686534" loading="lazy"><br>
然后执行安装命令</p>
<pre><code class="language-shell">pip install wtforms_json flask_compress celery flask_migrate flask_talisman flask_caching sqlparse bleach markdown numpy pandas parsedatetime pathlib2 simplejson humanize geohash polyline geopy cryptography backoff msgpack pyarrow contextlib2 croniter retry selenium isodate -i https://pypi.douban.com/simple
</code></pre>
<p>坑：Microsoft Visual C++ is requird<br>
<img src="https://img.imgdb.cn/item/6008db8d3ffa7d37b31cf68a.jpg" alt="1610693666385" loading="lazy"><br>
解决办法：安装Microsoft Visual C++ 14.0 tools http://go.microsoft.com/fwlink/?LinkId=691126 这个工具安装有几个G,安装速度尚可</p>
<p>对于安装不成功的包，示例如下</p>
<pre><code class="language-shell">py -3 -m pip install pandas -i https://pypi.douban.com/simple/ --trusted-host pypi.douban.com
</code></pre>
<p>或手动在https://pypi.org/project/   或 https://pypi.tuna.tsinghua.edu.cn/simple 中找对应的包进行安装</p>
<pre><code class="language-shell">python -m pip install pandas-1.2.0-cp38-cp38-win_amd64.whl
</code></pre>
<p>进入虚拟环境 superset/bin路径下，初始化数据库</p>
<p>如果使用其他数据库请先修改config.py文件配置</p>
<pre><code class="language-shell">(venv) D:\workspace\superset\venv\Lib\site-packages\superset\bin&gt;python superset db upgrade
</code></pre>
<p>报错1<br>
<img src="https://img.imgdb.cn/item/6008db8d3ffa7d37b31cf686.png" alt="1610693642732" loading="lazy"></p>
<p>解决方式是：</p>
<p>geohash这个组件安装之后在site-packages下其目录是大写的&quot;Geohash&quot;，这导致geohash这个组件pip install之后，仍然报找不到。我们把文件夹名&quot;Geohash&quot;修改为“geohash”。再将geohash文件夹下_<em>init</em>_.py文件，用文本打开，里面的from geohash修改成 from .geohash。<br>
<img src="https://img.imgdb.cn/item/6008db8d3ffa7d37b31cf680.png" alt="1610693626515" loading="lazy"><br>
<em>init</em>.py文件：<br>
<img src="https://img.imgdb.cn/item/6008db8d3ffa7d37b31cf67c.png" alt="1610693604380" loading="lazy"></p>
<p>报错2：<br>
<img src="https://img.imgdb.cn/item/6008db8d3ffa7d37b31cf67a.png" alt="1610693586743" loading="lazy"><br>
解决方式是：</p>
<p>手动安装cryptography</p>
<pre><code class="language-shell">python -m pip install D:\workspace\superset\cryptography-3.2.1-cp38-cp38-win_amd64.whl
</code></pre>
<p>同时建议安装低版本sqlalchemy</p>
<pre><code class="language-shell">pip install SQLAlchemy==1.2.18
</code></pre>
<p>报错3：<br>
<img src="https://img.imgdb.cn/item/6008db823ffa7d37b31cf087.png" alt="1610693401718" loading="lazy"><br>
解决方式是：<br>
Python3.8不再支持time.clock，但在调用时依然包含该方法；<br>
有效处理：<br>
用time.perf_counter()替换</p>
<pre><code>import time

tis1 =time.perf_counter()
print(&quot;等待5秒......&quot;)
time.sleep(5)
tis2=time.perf_counter()
print(tis2-tis1)
</code></pre>
<p>报错4：<br>
<img src="https://img.imgdb.cn/item/6008db823ffa7d37b31cf089.png" alt="1610693433164" loading="lazy"><br>
解决方法：</p>
<p>手动安装pyarrow</p>
<pre><code class="language-shell">python -m pip install D:\workspace\superset\pyarrow-2.0.0-cp38-cp38-win_amd64.whl
</code></pre>
<p>执行superset相关命令</p>
<pre><code class="language-shell">fabmanager create-admin --app superset
或下面的命令，建议下面这种方式
set FLASK_APP=superset（解决报错AttributeError: 'NoneType' object has no attribute 'auth_type'）
flask fab create-admin
</code></pre>
<p>坑：</p>
<figure data-type="image" tabindex="1"><img src="https://img.imgdb.cn/item/6008db823ffa7d37b31cf08d.jpg" alt="1610693475915" loading="lazy"></figure>
<p>解决办法：pip install flask-appbuilder<br>
<img src="https://img.imgdb.cn/item/6008db823ffa7d37b31cf092.jpg" alt="1610693525828" loading="lazy"><br>
报错：<br>
<img src="https://img.imgdb.cn/item/6008db823ffa7d37b31cf097.png" alt="1610693546986" loading="lazy"><br>
解决方法：在superset/bin下执行</p>
<pre><code class="language-shell">python superset fab create-admin
</code></pre>
<p>然后初始化系统并加载实例</p>
<pre><code class="language-shell">python superset init
python superset load-examples
</code></pre>
<p>注意在load-examples这步由于raw.githubusercontent.com国内网络访问出现问题，所以请科学上网一下。</p>
<p>最后运行</p>
<pre><code class="language-shell">python superset run
</code></pre>
]]></content>
    </entry>
</feed>